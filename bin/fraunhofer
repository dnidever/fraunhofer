#!/usr/bin/env python
#
# Script to run fraunhofer.fit() on a spectrum

import os
import time
import doppler
from astropy.io import fits
from astropy.table import Table
from argparse import ArgumentParser
from dlnpyutils import utils as dln
import subprocess

# Main command-line program
if __name__ == "__main__":
    parser = ArgumentParser(description='Run Fraunhofer fitting on spectra')
    parser.add_argument('files', type=str, nargs='*', help='Spectrum FITS files')
    parser.add_argument('--outfile', type=str, nargs=1, default='', help='Output filename')
    parser.add_argument('--figfile', type=str, nargs=1, default='', help='Figure filename')
    parser.add_argument('-d','--outdir', type=str, nargs=1, default='', help='Output directory')        
    parser.add_argument('-l','--list', type=str, nargs=1, default='', help='Input list of FITS files')
    parser.add_argument('-p','--plot', action='store_true', help='Save the plots')
    parser.add_argument('-r','--reader', type=str, nargs=1, default='', help='The spectral reader to use')
    parser.add_argument('-v','--verbose', action='store_true', help='Verbose output')
    args = parser.parse_args()

    t0 = time.time()
    files = args.files
    inpoutfile = dln.first_el(args.outfile)
    inpfigfile = dln.first_el(args.figfile)
    outdir = dln.first_el(args.outdir)
    if outdir == '': outdir = None
    verbose = args.verbose
    reader = dln.first_el(args.reader)
    if reader == '': reader = None
    saveplot = args.plot
    inlist = dln.first_el(args.list)
    
    # Load files from a list
    if (len(files)==0) & (inlist!=''):
        # Check that file exists
        if os.path.exists(inlist) is False:
            raise ValueError(inlist+' NOT FOUND')
        # Read in the list
        files = dln.readlines(inlist)
    nfiles = len(files)

    # Outfile and figfile can ONLY be used with a SINGLE file or JOINT fitting
    if (inpoutfile!='') & (nfiles>1) & (joint is False):
        raise ValueError('--outfile can only be used with a SINGLE input file')
    if (inpfigfile!='') & (nfiles>1) & (joint is False):
        raise ValueError('--figfile can only be used with a SINGLE input file')

    if (verbose is True) & (nfiles>1):
        print('--- Running Fraunhofer Fit on %d spectra ---' % nfiles)
        
    # Loop over the files
    for i,f in enumerate(files):
        # Check that the file exists
        if os.path.exists(f) is False:
            print(f+' NOT FOUND')
            continue

        # Load the spectrum
        spec = doppler.read(f,format=reader)
    
        if (verbose is True):
            if (nfiles>1):
                if (i>0): print('')
                print('Spectrum %3d:  %s  S/N=%6.1f ' % (i+1,f,spec.snr))
            else:
                print('%s  S/N=%6.1f ' % (f,spec.snr))

        # Save the figure
        if (nfiles==1) & (inpfigfile!=''):
            figfile = inpfigfile
        if (inpfigfile=='') & (saveplot is True):
            fdir,base,ext = doppler.utils.splitfilename(f)
            figfile = base+'_fraunhofer.png'
            if outdir is not None: figfile = outdir+'/'+figfile
            if (outdir is None) & (fdir != ''): figfile = fdir+'/'+figfile 

        # NEED TO INPUT FITTING PARAMETERS
            
        # Run Fraunhofer
        out, model = specfit.fit(spec,figfile=figfile,verbose=verbose)
            
        # Save the output
        if inpoutfile!='':
            outfile = inpoutfile
        else:
            fdir,base,ext = doppler.utils.splitfilename(f)
            outfile = base+'_fraunhofer.fits'
            if outdir is not None: outfile = outdir+'/'+outfile
            if (outdir is None) & (fdir != ''): outfile = fdir+'/'+outfile
        if verbose is True:
            print('Writing output to '+outfile)
        if os.path.exists(outfile): os.remove(outfile)
        Table(out).write(outfile)
        # append best model
        hdulist = fits.open(outfile)
        hdu = fits.PrimaryHDU(model.flux)
        hdulist.append(hdu)
        hdulist.writeto(outfile,overwrite=True)
        hdulist.close()
